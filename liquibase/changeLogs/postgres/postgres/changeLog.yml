databaseChangeLog:
  - preConditions:
    - dbms:
        type: postgresql
    - runningAs:
        username: postgres

  - changeSet:
      author: mbucknell
      id: "create.project.owner.role.${NWIS_WS_STAR_OWNER}"
      preConditions:
        - onFail: MARK_RAN
        - onError: HALT
        - sqlCheck:
            expectedResult: 0
            sql: select count(*) from pg_roles where rolname = '${NWIS_WS_STAR_OWNER}';
      changes:
        - sql: create role ${NWIS_WS_STAR_OWNER} with login password '${NWIS_WS_STAR_OWNER_PASSWORD}';
        - rollback: drop role if exists ${NWIS_WS_STAR_OWNER};

  - changeSet:
      author: mbucknel
      id: "grant.${NWIS_WS_STAR_OWNER}.to.postgres"
      changes:
        - sql: grant ${NWIS_WS_STAR_OWNER} to postgres;
        - rollback: revoke ${NWIS_WS_STAR_OWNER} from postgres;

  - changeSet:
      author: mbucknell
      id: "create.project.owner.role.${EXTERNAL_OWNER}"
      preConditions:
        - onFail: MARK_RAN
        - onError: HALT
        - sqlCheck:
            expectedResult: 0
            sql: select count(*) from pg_roles where rolname = '${EXTERNAL_OWNER}';
      changes:
        - sql: create role ${EXTERNAL_OWNER} with login password '${EXTERNAL_OWNER_PASSWORD}';
        - rollback: drop role if exists ${EXTERNAL_OWNER};

  - changeSet:
      author: mbucknell
      id: "create.project.owner.role.${INTERNAL_OWNER}"
      preConditions:
        - onFail: MARK_RAN
        - onError: HALT
        - sqlCheck:
            expectedResult: 0
            sql: select count(*) from pg_roles where rolname = '${INTERNAL_OWNER}';
      changes:
        - sql: create role ${INTERNAL_OWNER} with login password '${INTERNAL_OWNER_PASSWORD}';
        - rollback: drop role if exists ${INTERNAL_OWNER};

  - changeSet:
      author: mbucknell
      id: "create.project.database.${NWIS_WS_STAR_DATABASE_NAME}"
      preConditions:
        - onFail: MARK_RAN
        - onError: HALT
        - sqlCheck:
            expectedResult: 0
            sql: select count(*) from pg_database where datname = '$NWIS_WS_STAR_DATABASE_NAME}';
      runInTransaction: false
      changes:
        - sql: create database ${NWIS_WS_STAR_DATABASE_NAME} with owner = ${NWIS_WS_STAR_OWNER};
        - rollback: drop database if exists ${NWIS_WS_STAR_DATABASE_NAME};

  - changeSet:
      author: mbucknell
      id: "alter.database.${NWIS_WS_STAR_DATABASE_NAME}.search_path"
      changes:
        - sql: alter database ${NWIS_WS_STAR_DATABASE_NAME} set search_path = "$user", ${NWIS_WS_STAR_OWNER}, public;
        - rollback: alter database ${NWIS_WS_STAR_DATABASE_NAME} reset search_path;